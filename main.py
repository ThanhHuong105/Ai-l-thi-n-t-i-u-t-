import logging
import pandas as pd
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext
)

# Bot Constants
TOKEN = "7014456931:AAE5R6M9wgfMMyXPYCdogRTISwbaUjSXQRo"
SHEET_URL = "https://docs.google.com/spreadsheets/d/1QMKiohAaO5QtHoQwBX5efTXCI_Q791A4GnoCe9nMV2w/export?format=csv&gid=0"

# Logging
logging.basicConfig(format="%(asctime)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- H·ªó tr·ª£ t·∫£i c√¢u h·ªèi ---
def load_questions():
    try:
        data = pd.read_csv(SHEET_URL)
        questions = data.to_dict(orient="records")
        valid_questions = []
        for q in questions:
            if all(k in q for k in ["Question", "Option 1", "Option 2", "Option 3", "Answer"]) and q["Answer"] in [1, 2, 3]:
                valid_questions.append(q)
        random.shuffle(valid_questions)
        return valid_questions[:20]
    except Exception as e:
        logger.error(f"Error loading questions: {e}")
        return []

# --- L·ªánh /start ---
def start(update: Update, context: CallbackContext):
    context.user_data.clear()
    context.user_data["questions"] = load_questions()
    context.user_data["current_question"] = 0
    context.user_data["score"] = 0

    if not context.user_data["questions"]:
        update.message.reply_text("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return

    update.message.reply_text(
        "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Gameshow 'Thi√™n T√†i ƒê·∫ßu T∆∞'!\n\n"
        "üìú *Lu·∫≠t ch∆°i:*\n"
        "- C√≥ 20 c√¢u h·ªèi.\n"
        "- M·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng ƒë∆∞·ª£c 1 ƒëi·ªÉm.\n"
        "- N·∫øu kh√¥ng tr·∫£ l·ªùi trong 60 gi√¢y, b·∫°n s·∫Ω b·ªã t√≠nh 0 ƒëi·ªÉm.\n\n"
        "üî• Nh·∫•n /quiz ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·∫£ l·ªùi c√°c c√¢u h·ªèi!",
        parse_mode="Markdown"
    )

# --- L·ªánh /quiz ---
def quiz(update: Update, context: CallbackContext):
    if not context.user_data.get("questions"):
        update.message.reply_text("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return

    context.user_data["current_question"] = 0
    context.user_data["score"] = 0
    ask_question(update, context)

# --- Hi·ªÉn th·ªã c√¢u h·ªèi ---
def ask_question(update: Update, context: CallbackContext):
    current = context.user_data["current_question"]
    questions = context.user_data["questions"]

    if current < len(questions):
        question = questions[current]
        context.user_data["current_question"] += 1

        options = [question["Option 1"], question["Option 2"], question["Option 3"]]
        reply_markup = ReplyKeyboardMarkup([[1, 2, 3]], one_time_keyboard=True)

        update.message.reply_text(
            f"üí¨ *C√¢u {current + 1}:* {question['Question']}\n\n"
            f"1Ô∏è‚É£ {options[0]}\n"
            f"2Ô∏è‚É£ {options[1]}\n"
            f"3Ô∏è‚É£ {options[2]}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        finish_quiz(update, context)

# --- X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi ---
def handle_answer(update: Update, context: CallbackContext):
    user_data = context.user_data
    current = user_data["current_question"] - 1
    questions = user_data["questions"]

    try:
        user_answer = int(update.message.text)
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.")
        return

    correct_answer = int(questions[current]["Answer"])

    if user_answer == correct_answer:
        user_data["score"] += 1
        update.message.reply_text(f"‚úÖ Ch√≠nh x√°c! T·ªïng ƒëi·ªÉm hi·ªán t·∫°i: {user_data['score']}/20.")
    else:
        update.message.reply_text(
            f"‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† {correct_answer}.\n"
            f"üèÜ T·ªïng ƒëi·ªÉm hi·ªán t·∫°i: {user_data['score']}/20."
        )

    ask_question(update, context)

# --- Ho√†n th√†nh quiz ---
def finish_quiz(update: Update, context: CallbackContext):
    score = context.user_data.get("score", 0)

    if score >= 15:
        result = "ü•á B·∫°n ƒë√∫ng l√† Thi√™n t√†i ƒê·∫ßu t∆∞!"
    elif 12 <= score < 15:
        result = "ü•à Nh√† ƒë·∫ßu t∆∞ ti·ªÅm nƒÉng!"
    else:
        result = "ü•â H√£y h·ªçc h·ªèi th√™m ƒë·ªÉ th√†nh c√¥ng h∆°n."

    update.message.reply_text(
        f"üéâ *Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh Gameshow 'Thi√™n T√†i ƒê·∫ßu T∆∞'!*\n\n"
        f"üèÜ *T·ªïng ƒëi·ªÉm:* {score}/20.\n{result}",
        parse_mode="Markdown"
    )

# --- Ch·∫°y bot ---
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("quiz", quiz))
    dp.add_handler(MessageHandler(Filters.regex("^[1-3]$"), handle_answer))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
